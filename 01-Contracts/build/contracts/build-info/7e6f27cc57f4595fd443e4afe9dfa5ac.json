{
  "id": "7e6f27cc57f4595fd443e4afe9dfa5ac",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.2",
  "solcLongVersion": "0.8.2+commit.661d1103",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/rng.sol": {
        "content": "// // SPDX-License-Identifier: MIT\r\n// // An example of a consumer contract that relies on a subscription for funding.\r\n// pragma solidity ^0.8.2;\r\n\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n// import \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\n\r\n// contract VRFv2Consumer is VRFConsumerBaseV2 {\r\n//   VRFCoordinatorV2Interface COORDINATOR;\r\n//   LinkTokenInterface LINKTOKEN;\r\n\r\n//   // Your subscription ID.\r\n//   uint64 s_subscriptionId;\r\n\r\n//   // Rinkeby coordinator. For other networks,\r\n//   // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n//   address vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab;\r\n\r\n//   // Rinkeby LINK token contract. For other networks,\r\n//   // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n//   address link = 0x01BE23585060835E02B77ef475b0Cc51aA1e0709;\r\n\r\n//   // The gas lane to use, which specifies the maximum gas price to bump to.\r\n//   // For a list of available gas lanes on each network,\r\n//   // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n//   bytes32 keyHash = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\r\n\r\n//   // Depends on the number of requested values that you want sent to the\r\n//   // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n//   // so 100,000 is a safe default for this example contract. Test and adjust\r\n//   // this limit based on the network that you select, the size of the request,\r\n//   // and the processing of the callback request in the fulfillRandomWords()\r\n//   // function.\r\n//   uint32 callbackGasLimit = 100000;\r\n\r\n//   // The default is 3, but you can set this higher.\r\n//   uint16 requestConfirmations = 3;\r\n\r\n//   // For this example, retrieve 2 random values in one request.\r\n//   // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\r\n//   uint32 numWords =  2;\r\n\r\n//   uint256[] public s_randomWords;\r\n//   uint256 public s_requestId;\r\n//   address s_owner;\r\n\r\n//   constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {\r\n//     COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n//     LINKTOKEN = LinkTokenInterface(link);\r\n//     s_owner = msg.sender;\r\n//     s_subscriptionId = subscriptionId;\r\n//   }\r\n\r\n//   // Assumes the subscription is funded sufficiently.\r\n//   function requestRandomWords() external onlyOwner {\r\n//     // Will revert if subscription is not set and funded.\r\n//     s_requestId = COORDINATOR.requestRandomWords(\r\n//       keyHash,\r\n//       s_subscriptionId,\r\n//       requestConfirmations,\r\n//       callbackGasLimit,\r\n//       numWords\r\n//     );\r\n//   }\r\n  \r\n//   function fulfillRandomWords(\r\n//     uint256, /* requestId */\r\n//     uint256[] memory randomWords\r\n//   ) internal override {\r\n//     s_randomWords = randomWords;\r\n//   }\r\n\r\n//   modifier onlyOwner() {\r\n//     require(msg.sender == s_owner);\r\n//     _;\r\n//   }\r\n// }\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.2;\"\n--> contracts/rng.sol\n\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.2;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/rng.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/rng.sol": {
        "ast": {
          "absolutePath": "contracts/rng.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "3016:0:0"
        },
        "id": 0
      }
    }
  }
}
